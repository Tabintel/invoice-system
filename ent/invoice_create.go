// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/Tabintel/invoice-system/ent/customer"
	"github.com/Tabintel/invoice-system/ent/invoice"
	"github.com/Tabintel/invoice-system/ent/invoiceitem"
	"github.com/Tabintel/invoice-system/ent/payment"
	"github.com/Tabintel/invoice-system/ent/user"
)

// InvoiceCreate is the builder for creating a Invoice entity.
type InvoiceCreate struct {
	config
	mutation *InvoiceMutation
	hooks    []Hook
}

// SetReferenceNumber sets the "reference_number" field.
func (ic *InvoiceCreate) SetReferenceNumber(s string) *InvoiceCreate {
	ic.mutation.SetReferenceNumber(s)
	return ic
}

// SetTotalAmount sets the "total_amount" field.
func (ic *InvoiceCreate) SetTotalAmount(f float64) *InvoiceCreate {
	ic.mutation.SetTotalAmount(f)
	return ic
}

// SetStatus sets the "status" field.
func (ic *InvoiceCreate) SetStatus(s string) *InvoiceCreate {
	ic.mutation.SetStatus(s)
	return ic
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (ic *InvoiceCreate) SetNillableStatus(s *string) *InvoiceCreate {
	if s != nil {
		ic.SetStatus(*s)
	}
	return ic
}

// SetIssueDate sets the "issue_date" field.
func (ic *InvoiceCreate) SetIssueDate(t time.Time) *InvoiceCreate {
	ic.mutation.SetIssueDate(t)
	return ic
}

// SetDueDate sets the "due_date" field.
func (ic *InvoiceCreate) SetDueDate(t time.Time) *InvoiceCreate {
	ic.mutation.SetDueDate(t)
	return ic
}

// SetCurrency sets the "currency" field.
func (ic *InvoiceCreate) SetCurrency(s string) *InvoiceCreate {
	ic.mutation.SetCurrency(s)
	return ic
}

// SetNillableCurrency sets the "currency" field if the given value is not nil.
func (ic *InvoiceCreate) SetNillableCurrency(s *string) *InvoiceCreate {
	if s != nil {
		ic.SetCurrency(*s)
	}
	return ic
}

// SetCreatedAt sets the "created_at" field.
func (ic *InvoiceCreate) SetCreatedAt(t time.Time) *InvoiceCreate {
	ic.mutation.SetCreatedAt(t)
	return ic
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ic *InvoiceCreate) SetNillableCreatedAt(t *time.Time) *InvoiceCreate {
	if t != nil {
		ic.SetCreatedAt(*t)
	}
	return ic
}

// SetCreatorID sets the "creator" edge to the User entity by ID.
func (ic *InvoiceCreate) SetCreatorID(id int) *InvoiceCreate {
	ic.mutation.SetCreatorID(id)
	return ic
}

// SetNillableCreatorID sets the "creator" edge to the User entity by ID if the given value is not nil.
func (ic *InvoiceCreate) SetNillableCreatorID(id *int) *InvoiceCreate {
	if id != nil {
		ic = ic.SetCreatorID(*id)
	}
	return ic
}

// SetCreator sets the "creator" edge to the User entity.
func (ic *InvoiceCreate) SetCreator(u *User) *InvoiceCreate {
	return ic.SetCreatorID(u.ID)
}

// AddItemIDs adds the "items" edge to the InvoiceItem entity by IDs.
func (ic *InvoiceCreate) AddItemIDs(ids ...int) *InvoiceCreate {
	ic.mutation.AddItemIDs(ids...)
	return ic
}

// AddItems adds the "items" edges to the InvoiceItem entity.
func (ic *InvoiceCreate) AddItems(i ...*InvoiceItem) *InvoiceCreate {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return ic.AddItemIDs(ids...)
}

// AddPaymentIDs adds the "payments" edge to the Payment entity by IDs.
func (ic *InvoiceCreate) AddPaymentIDs(ids ...int) *InvoiceCreate {
	ic.mutation.AddPaymentIDs(ids...)
	return ic
}

// AddPayments adds the "payments" edges to the Payment entity.
func (ic *InvoiceCreate) AddPayments(p ...*Payment) *InvoiceCreate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return ic.AddPaymentIDs(ids...)
}

// SetCustomerID sets the "customer" edge to the Customer entity by ID.
func (ic *InvoiceCreate) SetCustomerID(id int) *InvoiceCreate {
	ic.mutation.SetCustomerID(id)
	return ic
}

// SetNillableCustomerID sets the "customer" edge to the Customer entity by ID if the given value is not nil.
func (ic *InvoiceCreate) SetNillableCustomerID(id *int) *InvoiceCreate {
	if id != nil {
		ic = ic.SetCustomerID(*id)
	}
	return ic
}

// SetCustomer sets the "customer" edge to the Customer entity.
func (ic *InvoiceCreate) SetCustomer(c *Customer) *InvoiceCreate {
	return ic.SetCustomerID(c.ID)
}

// Mutation returns the InvoiceMutation object of the builder.
func (ic *InvoiceCreate) Mutation() *InvoiceMutation {
	return ic.mutation
}

// Save creates the Invoice in the database.
func (ic *InvoiceCreate) Save(ctx context.Context) (*Invoice, error) {
	ic.defaults()
	return withHooks(ctx, ic.sqlSave, ic.mutation, ic.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ic *InvoiceCreate) SaveX(ctx context.Context) *Invoice {
	v, err := ic.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ic *InvoiceCreate) Exec(ctx context.Context) error {
	_, err := ic.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ic *InvoiceCreate) ExecX(ctx context.Context) {
	if err := ic.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ic *InvoiceCreate) defaults() {
	if _, ok := ic.mutation.Status(); !ok {
		v := invoice.DefaultStatus
		ic.mutation.SetStatus(v)
	}
	if _, ok := ic.mutation.Currency(); !ok {
		v := invoice.DefaultCurrency
		ic.mutation.SetCurrency(v)
	}
	if _, ok := ic.mutation.CreatedAt(); !ok {
		v := invoice.DefaultCreatedAt()
		ic.mutation.SetCreatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ic *InvoiceCreate) check() error {
	if _, ok := ic.mutation.ReferenceNumber(); !ok {
		return &ValidationError{Name: "reference_number", err: errors.New(`ent: missing required field "Invoice.reference_number"`)}
	}
	if _, ok := ic.mutation.TotalAmount(); !ok {
		return &ValidationError{Name: "total_amount", err: errors.New(`ent: missing required field "Invoice.total_amount"`)}
	}
	if _, ok := ic.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "Invoice.status"`)}
	}
	if _, ok := ic.mutation.IssueDate(); !ok {
		return &ValidationError{Name: "issue_date", err: errors.New(`ent: missing required field "Invoice.issue_date"`)}
	}
	if _, ok := ic.mutation.DueDate(); !ok {
		return &ValidationError{Name: "due_date", err: errors.New(`ent: missing required field "Invoice.due_date"`)}
	}
	if _, ok := ic.mutation.Currency(); !ok {
		return &ValidationError{Name: "currency", err: errors.New(`ent: missing required field "Invoice.currency"`)}
	}
	if _, ok := ic.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Invoice.created_at"`)}
	}
	return nil
}

func (ic *InvoiceCreate) sqlSave(ctx context.Context) (*Invoice, error) {
	if err := ic.check(); err != nil {
		return nil, err
	}
	_node, _spec := ic.createSpec()
	if err := sqlgraph.CreateNode(ctx, ic.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	ic.mutation.id = &_node.ID
	ic.mutation.done = true
	return _node, nil
}

func (ic *InvoiceCreate) createSpec() (*Invoice, *sqlgraph.CreateSpec) {
	var (
		_node = &Invoice{config: ic.config}
		_spec = sqlgraph.NewCreateSpec(invoice.Table, sqlgraph.NewFieldSpec(invoice.FieldID, field.TypeInt))
	)
	if value, ok := ic.mutation.ReferenceNumber(); ok {
		_spec.SetField(invoice.FieldReferenceNumber, field.TypeString, value)
		_node.ReferenceNumber = value
	}
	if value, ok := ic.mutation.TotalAmount(); ok {
		_spec.SetField(invoice.FieldTotalAmount, field.TypeFloat64, value)
		_node.TotalAmount = value
	}
	if value, ok := ic.mutation.Status(); ok {
		_spec.SetField(invoice.FieldStatus, field.TypeString, value)
		_node.Status = value
	}
	if value, ok := ic.mutation.IssueDate(); ok {
		_spec.SetField(invoice.FieldIssueDate, field.TypeTime, value)
		_node.IssueDate = value
	}
	if value, ok := ic.mutation.DueDate(); ok {
		_spec.SetField(invoice.FieldDueDate, field.TypeTime, value)
		_node.DueDate = value
	}
	if value, ok := ic.mutation.Currency(); ok {
		_spec.SetField(invoice.FieldCurrency, field.TypeString, value)
		_node.Currency = value
	}
	if value, ok := ic.mutation.CreatedAt(); ok {
		_spec.SetField(invoice.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if nodes := ic.mutation.CreatorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   invoice.CreatorTable,
			Columns: []string{invoice.CreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.user_invoices = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ic.mutation.ItemsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   invoice.ItemsTable,
			Columns: []string{invoice.ItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(invoiceitem.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ic.mutation.PaymentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   invoice.PaymentsTable,
			Columns: []string{invoice.PaymentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(payment.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ic.mutation.CustomerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   invoice.CustomerTable,
			Columns: []string{invoice.CustomerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customer.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.invoice_customer = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// InvoiceCreateBulk is the builder for creating many Invoice entities in bulk.
type InvoiceCreateBulk struct {
	config
	err      error
	builders []*InvoiceCreate
}

// Save creates the Invoice entities in the database.
func (icb *InvoiceCreateBulk) Save(ctx context.Context) ([]*Invoice, error) {
	if icb.err != nil {
		return nil, icb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(icb.builders))
	nodes := make([]*Invoice, len(icb.builders))
	mutators := make([]Mutator, len(icb.builders))
	for i := range icb.builders {
		func(i int, root context.Context) {
			builder := icb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*InvoiceMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, icb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, icb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, icb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (icb *InvoiceCreateBulk) SaveX(ctx context.Context) []*Invoice {
	v, err := icb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (icb *InvoiceCreateBulk) Exec(ctx context.Context) error {
	_, err := icb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (icb *InvoiceCreateBulk) ExecX(ctx context.Context) {
	if err := icb.Exec(ctx); err != nil {
		panic(err)
	}
}
