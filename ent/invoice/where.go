// Code generated by ent, DO NOT EDIT.

package invoice

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/Tabintel/invoice-system/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Invoice {
	return predicate.Invoice(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Invoice {
	return predicate.Invoice(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Invoice {
	return predicate.Invoice(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Invoice {
	return predicate.Invoice(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Invoice {
	return predicate.Invoice(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Invoice {
	return predicate.Invoice(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Invoice {
	return predicate.Invoice(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Invoice {
	return predicate.Invoice(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Invoice {
	return predicate.Invoice(sql.FieldLTE(FieldID, id))
}

// ReferenceNumber applies equality check predicate on the "reference_number" field. It's identical to ReferenceNumberEQ.
func ReferenceNumber(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldEQ(FieldReferenceNumber, v))
}

// TotalAmount applies equality check predicate on the "total_amount" field. It's identical to TotalAmountEQ.
func TotalAmount(v float64) predicate.Invoice {
	return predicate.Invoice(sql.FieldEQ(FieldTotalAmount, v))
}

// Status applies equality check predicate on the "status" field. It's identical to StatusEQ.
func Status(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldEQ(FieldStatus, v))
}

// IssueDate applies equality check predicate on the "issue_date" field. It's identical to IssueDateEQ.
func IssueDate(v time.Time) predicate.Invoice {
	return predicate.Invoice(sql.FieldEQ(FieldIssueDate, v))
}

// DueDate applies equality check predicate on the "due_date" field. It's identical to DueDateEQ.
func DueDate(v time.Time) predicate.Invoice {
	return predicate.Invoice(sql.FieldEQ(FieldDueDate, v))
}

// Currency applies equality check predicate on the "currency" field. It's identical to CurrencyEQ.
func Currency(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldEQ(FieldCurrency, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Invoice {
	return predicate.Invoice(sql.FieldEQ(FieldCreatedAt, v))
}

// ShareToken applies equality check predicate on the "share_token" field. It's identical to ShareTokenEQ.
func ShareToken(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldEQ(FieldShareToken, v))
}

// ShareExpiry applies equality check predicate on the "share_expiry" field. It's identical to ShareExpiryEQ.
func ShareExpiry(v time.Time) predicate.Invoice {
	return predicate.Invoice(sql.FieldEQ(FieldShareExpiry, v))
}

// ReferenceNumberEQ applies the EQ predicate on the "reference_number" field.
func ReferenceNumberEQ(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldEQ(FieldReferenceNumber, v))
}

// ReferenceNumberNEQ applies the NEQ predicate on the "reference_number" field.
func ReferenceNumberNEQ(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldNEQ(FieldReferenceNumber, v))
}

// ReferenceNumberIn applies the In predicate on the "reference_number" field.
func ReferenceNumberIn(vs ...string) predicate.Invoice {
	return predicate.Invoice(sql.FieldIn(FieldReferenceNumber, vs...))
}

// ReferenceNumberNotIn applies the NotIn predicate on the "reference_number" field.
func ReferenceNumberNotIn(vs ...string) predicate.Invoice {
	return predicate.Invoice(sql.FieldNotIn(FieldReferenceNumber, vs...))
}

// ReferenceNumberGT applies the GT predicate on the "reference_number" field.
func ReferenceNumberGT(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldGT(FieldReferenceNumber, v))
}

// ReferenceNumberGTE applies the GTE predicate on the "reference_number" field.
func ReferenceNumberGTE(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldGTE(FieldReferenceNumber, v))
}

// ReferenceNumberLT applies the LT predicate on the "reference_number" field.
func ReferenceNumberLT(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldLT(FieldReferenceNumber, v))
}

// ReferenceNumberLTE applies the LTE predicate on the "reference_number" field.
func ReferenceNumberLTE(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldLTE(FieldReferenceNumber, v))
}

// ReferenceNumberContains applies the Contains predicate on the "reference_number" field.
func ReferenceNumberContains(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldContains(FieldReferenceNumber, v))
}

// ReferenceNumberHasPrefix applies the HasPrefix predicate on the "reference_number" field.
func ReferenceNumberHasPrefix(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldHasPrefix(FieldReferenceNumber, v))
}

// ReferenceNumberHasSuffix applies the HasSuffix predicate on the "reference_number" field.
func ReferenceNumberHasSuffix(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldHasSuffix(FieldReferenceNumber, v))
}

// ReferenceNumberEqualFold applies the EqualFold predicate on the "reference_number" field.
func ReferenceNumberEqualFold(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldEqualFold(FieldReferenceNumber, v))
}

// ReferenceNumberContainsFold applies the ContainsFold predicate on the "reference_number" field.
func ReferenceNumberContainsFold(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldContainsFold(FieldReferenceNumber, v))
}

// TotalAmountEQ applies the EQ predicate on the "total_amount" field.
func TotalAmountEQ(v float64) predicate.Invoice {
	return predicate.Invoice(sql.FieldEQ(FieldTotalAmount, v))
}

// TotalAmountNEQ applies the NEQ predicate on the "total_amount" field.
func TotalAmountNEQ(v float64) predicate.Invoice {
	return predicate.Invoice(sql.FieldNEQ(FieldTotalAmount, v))
}

// TotalAmountIn applies the In predicate on the "total_amount" field.
func TotalAmountIn(vs ...float64) predicate.Invoice {
	return predicate.Invoice(sql.FieldIn(FieldTotalAmount, vs...))
}

// TotalAmountNotIn applies the NotIn predicate on the "total_amount" field.
func TotalAmountNotIn(vs ...float64) predicate.Invoice {
	return predicate.Invoice(sql.FieldNotIn(FieldTotalAmount, vs...))
}

// TotalAmountGT applies the GT predicate on the "total_amount" field.
func TotalAmountGT(v float64) predicate.Invoice {
	return predicate.Invoice(sql.FieldGT(FieldTotalAmount, v))
}

// TotalAmountGTE applies the GTE predicate on the "total_amount" field.
func TotalAmountGTE(v float64) predicate.Invoice {
	return predicate.Invoice(sql.FieldGTE(FieldTotalAmount, v))
}

// TotalAmountLT applies the LT predicate on the "total_amount" field.
func TotalAmountLT(v float64) predicate.Invoice {
	return predicate.Invoice(sql.FieldLT(FieldTotalAmount, v))
}

// TotalAmountLTE applies the LTE predicate on the "total_amount" field.
func TotalAmountLTE(v float64) predicate.Invoice {
	return predicate.Invoice(sql.FieldLTE(FieldTotalAmount, v))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...string) predicate.Invoice {
	return predicate.Invoice(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...string) predicate.Invoice {
	return predicate.Invoice(sql.FieldNotIn(FieldStatus, vs...))
}

// StatusGT applies the GT predicate on the "status" field.
func StatusGT(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldGT(FieldStatus, v))
}

// StatusGTE applies the GTE predicate on the "status" field.
func StatusGTE(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldGTE(FieldStatus, v))
}

// StatusLT applies the LT predicate on the "status" field.
func StatusLT(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldLT(FieldStatus, v))
}

// StatusLTE applies the LTE predicate on the "status" field.
func StatusLTE(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldLTE(FieldStatus, v))
}

// StatusContains applies the Contains predicate on the "status" field.
func StatusContains(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldContains(FieldStatus, v))
}

// StatusHasPrefix applies the HasPrefix predicate on the "status" field.
func StatusHasPrefix(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldHasPrefix(FieldStatus, v))
}

// StatusHasSuffix applies the HasSuffix predicate on the "status" field.
func StatusHasSuffix(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldHasSuffix(FieldStatus, v))
}

// StatusEqualFold applies the EqualFold predicate on the "status" field.
func StatusEqualFold(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldEqualFold(FieldStatus, v))
}

// StatusContainsFold applies the ContainsFold predicate on the "status" field.
func StatusContainsFold(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldContainsFold(FieldStatus, v))
}

// IssueDateEQ applies the EQ predicate on the "issue_date" field.
func IssueDateEQ(v time.Time) predicate.Invoice {
	return predicate.Invoice(sql.FieldEQ(FieldIssueDate, v))
}

// IssueDateNEQ applies the NEQ predicate on the "issue_date" field.
func IssueDateNEQ(v time.Time) predicate.Invoice {
	return predicate.Invoice(sql.FieldNEQ(FieldIssueDate, v))
}

// IssueDateIn applies the In predicate on the "issue_date" field.
func IssueDateIn(vs ...time.Time) predicate.Invoice {
	return predicate.Invoice(sql.FieldIn(FieldIssueDate, vs...))
}

// IssueDateNotIn applies the NotIn predicate on the "issue_date" field.
func IssueDateNotIn(vs ...time.Time) predicate.Invoice {
	return predicate.Invoice(sql.FieldNotIn(FieldIssueDate, vs...))
}

// IssueDateGT applies the GT predicate on the "issue_date" field.
func IssueDateGT(v time.Time) predicate.Invoice {
	return predicate.Invoice(sql.FieldGT(FieldIssueDate, v))
}

// IssueDateGTE applies the GTE predicate on the "issue_date" field.
func IssueDateGTE(v time.Time) predicate.Invoice {
	return predicate.Invoice(sql.FieldGTE(FieldIssueDate, v))
}

// IssueDateLT applies the LT predicate on the "issue_date" field.
func IssueDateLT(v time.Time) predicate.Invoice {
	return predicate.Invoice(sql.FieldLT(FieldIssueDate, v))
}

// IssueDateLTE applies the LTE predicate on the "issue_date" field.
func IssueDateLTE(v time.Time) predicate.Invoice {
	return predicate.Invoice(sql.FieldLTE(FieldIssueDate, v))
}

// DueDateEQ applies the EQ predicate on the "due_date" field.
func DueDateEQ(v time.Time) predicate.Invoice {
	return predicate.Invoice(sql.FieldEQ(FieldDueDate, v))
}

// DueDateNEQ applies the NEQ predicate on the "due_date" field.
func DueDateNEQ(v time.Time) predicate.Invoice {
	return predicate.Invoice(sql.FieldNEQ(FieldDueDate, v))
}

// DueDateIn applies the In predicate on the "due_date" field.
func DueDateIn(vs ...time.Time) predicate.Invoice {
	return predicate.Invoice(sql.FieldIn(FieldDueDate, vs...))
}

// DueDateNotIn applies the NotIn predicate on the "due_date" field.
func DueDateNotIn(vs ...time.Time) predicate.Invoice {
	return predicate.Invoice(sql.FieldNotIn(FieldDueDate, vs...))
}

// DueDateGT applies the GT predicate on the "due_date" field.
func DueDateGT(v time.Time) predicate.Invoice {
	return predicate.Invoice(sql.FieldGT(FieldDueDate, v))
}

// DueDateGTE applies the GTE predicate on the "due_date" field.
func DueDateGTE(v time.Time) predicate.Invoice {
	return predicate.Invoice(sql.FieldGTE(FieldDueDate, v))
}

// DueDateLT applies the LT predicate on the "due_date" field.
func DueDateLT(v time.Time) predicate.Invoice {
	return predicate.Invoice(sql.FieldLT(FieldDueDate, v))
}

// DueDateLTE applies the LTE predicate on the "due_date" field.
func DueDateLTE(v time.Time) predicate.Invoice {
	return predicate.Invoice(sql.FieldLTE(FieldDueDate, v))
}

// CurrencyEQ applies the EQ predicate on the "currency" field.
func CurrencyEQ(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldEQ(FieldCurrency, v))
}

// CurrencyNEQ applies the NEQ predicate on the "currency" field.
func CurrencyNEQ(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldNEQ(FieldCurrency, v))
}

// CurrencyIn applies the In predicate on the "currency" field.
func CurrencyIn(vs ...string) predicate.Invoice {
	return predicate.Invoice(sql.FieldIn(FieldCurrency, vs...))
}

// CurrencyNotIn applies the NotIn predicate on the "currency" field.
func CurrencyNotIn(vs ...string) predicate.Invoice {
	return predicate.Invoice(sql.FieldNotIn(FieldCurrency, vs...))
}

// CurrencyGT applies the GT predicate on the "currency" field.
func CurrencyGT(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldGT(FieldCurrency, v))
}

// CurrencyGTE applies the GTE predicate on the "currency" field.
func CurrencyGTE(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldGTE(FieldCurrency, v))
}

// CurrencyLT applies the LT predicate on the "currency" field.
func CurrencyLT(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldLT(FieldCurrency, v))
}

// CurrencyLTE applies the LTE predicate on the "currency" field.
func CurrencyLTE(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldLTE(FieldCurrency, v))
}

// CurrencyContains applies the Contains predicate on the "currency" field.
func CurrencyContains(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldContains(FieldCurrency, v))
}

// CurrencyHasPrefix applies the HasPrefix predicate on the "currency" field.
func CurrencyHasPrefix(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldHasPrefix(FieldCurrency, v))
}

// CurrencyHasSuffix applies the HasSuffix predicate on the "currency" field.
func CurrencyHasSuffix(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldHasSuffix(FieldCurrency, v))
}

// CurrencyEqualFold applies the EqualFold predicate on the "currency" field.
func CurrencyEqualFold(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldEqualFold(FieldCurrency, v))
}

// CurrencyContainsFold applies the ContainsFold predicate on the "currency" field.
func CurrencyContainsFold(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldContainsFold(FieldCurrency, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Invoice {
	return predicate.Invoice(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Invoice {
	return predicate.Invoice(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Invoice {
	return predicate.Invoice(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Invoice {
	return predicate.Invoice(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Invoice {
	return predicate.Invoice(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Invoice {
	return predicate.Invoice(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Invoice {
	return predicate.Invoice(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Invoice {
	return predicate.Invoice(sql.FieldLTE(FieldCreatedAt, v))
}

// ShareTokenEQ applies the EQ predicate on the "share_token" field.
func ShareTokenEQ(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldEQ(FieldShareToken, v))
}

// ShareTokenNEQ applies the NEQ predicate on the "share_token" field.
func ShareTokenNEQ(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldNEQ(FieldShareToken, v))
}

// ShareTokenIn applies the In predicate on the "share_token" field.
func ShareTokenIn(vs ...string) predicate.Invoice {
	return predicate.Invoice(sql.FieldIn(FieldShareToken, vs...))
}

// ShareTokenNotIn applies the NotIn predicate on the "share_token" field.
func ShareTokenNotIn(vs ...string) predicate.Invoice {
	return predicate.Invoice(sql.FieldNotIn(FieldShareToken, vs...))
}

// ShareTokenGT applies the GT predicate on the "share_token" field.
func ShareTokenGT(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldGT(FieldShareToken, v))
}

// ShareTokenGTE applies the GTE predicate on the "share_token" field.
func ShareTokenGTE(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldGTE(FieldShareToken, v))
}

// ShareTokenLT applies the LT predicate on the "share_token" field.
func ShareTokenLT(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldLT(FieldShareToken, v))
}

// ShareTokenLTE applies the LTE predicate on the "share_token" field.
func ShareTokenLTE(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldLTE(FieldShareToken, v))
}

// ShareTokenContains applies the Contains predicate on the "share_token" field.
func ShareTokenContains(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldContains(FieldShareToken, v))
}

// ShareTokenHasPrefix applies the HasPrefix predicate on the "share_token" field.
func ShareTokenHasPrefix(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldHasPrefix(FieldShareToken, v))
}

// ShareTokenHasSuffix applies the HasSuffix predicate on the "share_token" field.
func ShareTokenHasSuffix(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldHasSuffix(FieldShareToken, v))
}

// ShareTokenIsNil applies the IsNil predicate on the "share_token" field.
func ShareTokenIsNil() predicate.Invoice {
	return predicate.Invoice(sql.FieldIsNull(FieldShareToken))
}

// ShareTokenNotNil applies the NotNil predicate on the "share_token" field.
func ShareTokenNotNil() predicate.Invoice {
	return predicate.Invoice(sql.FieldNotNull(FieldShareToken))
}

// ShareTokenEqualFold applies the EqualFold predicate on the "share_token" field.
func ShareTokenEqualFold(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldEqualFold(FieldShareToken, v))
}

// ShareTokenContainsFold applies the ContainsFold predicate on the "share_token" field.
func ShareTokenContainsFold(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldContainsFold(FieldShareToken, v))
}

// ShareExpiryEQ applies the EQ predicate on the "share_expiry" field.
func ShareExpiryEQ(v time.Time) predicate.Invoice {
	return predicate.Invoice(sql.FieldEQ(FieldShareExpiry, v))
}

// ShareExpiryNEQ applies the NEQ predicate on the "share_expiry" field.
func ShareExpiryNEQ(v time.Time) predicate.Invoice {
	return predicate.Invoice(sql.FieldNEQ(FieldShareExpiry, v))
}

// ShareExpiryIn applies the In predicate on the "share_expiry" field.
func ShareExpiryIn(vs ...time.Time) predicate.Invoice {
	return predicate.Invoice(sql.FieldIn(FieldShareExpiry, vs...))
}

// ShareExpiryNotIn applies the NotIn predicate on the "share_expiry" field.
func ShareExpiryNotIn(vs ...time.Time) predicate.Invoice {
	return predicate.Invoice(sql.FieldNotIn(FieldShareExpiry, vs...))
}

// ShareExpiryGT applies the GT predicate on the "share_expiry" field.
func ShareExpiryGT(v time.Time) predicate.Invoice {
	return predicate.Invoice(sql.FieldGT(FieldShareExpiry, v))
}

// ShareExpiryGTE applies the GTE predicate on the "share_expiry" field.
func ShareExpiryGTE(v time.Time) predicate.Invoice {
	return predicate.Invoice(sql.FieldGTE(FieldShareExpiry, v))
}

// ShareExpiryLT applies the LT predicate on the "share_expiry" field.
func ShareExpiryLT(v time.Time) predicate.Invoice {
	return predicate.Invoice(sql.FieldLT(FieldShareExpiry, v))
}

// ShareExpiryLTE applies the LTE predicate on the "share_expiry" field.
func ShareExpiryLTE(v time.Time) predicate.Invoice {
	return predicate.Invoice(sql.FieldLTE(FieldShareExpiry, v))
}

// ShareExpiryIsNil applies the IsNil predicate on the "share_expiry" field.
func ShareExpiryIsNil() predicate.Invoice {
	return predicate.Invoice(sql.FieldIsNull(FieldShareExpiry))
}

// ShareExpiryNotNil applies the NotNil predicate on the "share_expiry" field.
func ShareExpiryNotNil() predicate.Invoice {
	return predicate.Invoice(sql.FieldNotNull(FieldShareExpiry))
}

// HasCreator applies the HasEdge predicate on the "creator" edge.
func HasCreator() predicate.Invoice {
	return predicate.Invoice(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, CreatorTable, CreatorColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCreatorWith applies the HasEdge predicate on the "creator" edge with a given conditions (other predicates).
func HasCreatorWith(preds ...predicate.User) predicate.Invoice {
	return predicate.Invoice(func(s *sql.Selector) {
		step := newCreatorStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasItems applies the HasEdge predicate on the "items" edge.
func HasItems() predicate.Invoice {
	return predicate.Invoice(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ItemsTable, ItemsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasItemsWith applies the HasEdge predicate on the "items" edge with a given conditions (other predicates).
func HasItemsWith(preds ...predicate.InvoiceItem) predicate.Invoice {
	return predicate.Invoice(func(s *sql.Selector) {
		step := newItemsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasPayments applies the HasEdge predicate on the "payments" edge.
func HasPayments() predicate.Invoice {
	return predicate.Invoice(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, PaymentsTable, PaymentsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPaymentsWith applies the HasEdge predicate on the "payments" edge with a given conditions (other predicates).
func HasPaymentsWith(preds ...predicate.Payment) predicate.Invoice {
	return predicate.Invoice(func(s *sql.Selector) {
		step := newPaymentsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasCustomer applies the HasEdge predicate on the "customer" edge.
func HasCustomer() predicate.Invoice {
	return predicate.Invoice(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, CustomerTable, CustomerColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCustomerWith applies the HasEdge predicate on the "customer" edge with a given conditions (other predicates).
func HasCustomerWith(preds ...predicate.Customer) predicate.Invoice {
	return predicate.Invoice(func(s *sql.Selector) {
		step := newCustomerStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Invoice) predicate.Invoice {
	return predicate.Invoice(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Invoice) predicate.Invoice {
	return predicate.Invoice(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Invoice) predicate.Invoice {
	return predicate.Invoice(sql.NotPredicates(p))
}
