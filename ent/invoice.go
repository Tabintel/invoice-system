// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/Tabintel/invoice-system/ent/customer"
	"github.com/Tabintel/invoice-system/ent/invoice"
	"github.com/Tabintel/invoice-system/ent/user"
)

// Invoice is the model entity for the Invoice schema.
type Invoice struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// ReferenceNumber holds the value of the "reference_number" field.
	ReferenceNumber string `json:"reference_number,omitempty"`
	// TotalAmount holds the value of the "total_amount" field.
	TotalAmount float64 `json:"total_amount,omitempty"`
	// Status holds the value of the "status" field.
	Status string `json:"status,omitempty"`
	// IssueDate holds the value of the "issue_date" field.
	IssueDate time.Time `json:"issue_date,omitempty"`
	// DueDate holds the value of the "due_date" field.
	DueDate time.Time `json:"due_date,omitempty"`
	// Currency holds the value of the "currency" field.
	Currency string `json:"currency,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// ShareToken holds the value of the "share_token" field.
	ShareToken string `json:"share_token,omitempty"`
	// ShareExpiry holds the value of the "share_expiry" field.
	ShareExpiry time.Time `json:"share_expiry,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the InvoiceQuery when eager-loading is set.
	Edges            InvoiceEdges `json:"edges"`
	invoice_customer *int
	user_invoices    *int
	selectValues     sql.SelectValues
}

// InvoiceEdges holds the relations/edges for other nodes in the graph.
type InvoiceEdges struct {
	// Creator holds the value of the creator edge.
	Creator *User `json:"creator,omitempty"`
	// Items holds the value of the items edge.
	Items []*InvoiceItem `json:"items,omitempty"`
	// Payments holds the value of the payments edge.
	Payments []*Payment `json:"payments,omitempty"`
	// Customer holds the value of the customer edge.
	Customer *Customer `json:"customer,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [4]bool
}

// CreatorOrErr returns the Creator value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e InvoiceEdges) CreatorOrErr() (*User, error) {
	if e.Creator != nil {
		return e.Creator, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "creator"}
}

// ItemsOrErr returns the Items value or an error if the edge
// was not loaded in eager-loading.
func (e InvoiceEdges) ItemsOrErr() ([]*InvoiceItem, error) {
	if e.loadedTypes[1] {
		return e.Items, nil
	}
	return nil, &NotLoadedError{edge: "items"}
}

// PaymentsOrErr returns the Payments value or an error if the edge
// was not loaded in eager-loading.
func (e InvoiceEdges) PaymentsOrErr() ([]*Payment, error) {
	if e.loadedTypes[2] {
		return e.Payments, nil
	}
	return nil, &NotLoadedError{edge: "payments"}
}

// CustomerOrErr returns the Customer value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e InvoiceEdges) CustomerOrErr() (*Customer, error) {
	if e.Customer != nil {
		return e.Customer, nil
	} else if e.loadedTypes[3] {
		return nil, &NotFoundError{label: customer.Label}
	}
	return nil, &NotLoadedError{edge: "customer"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Invoice) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case invoice.FieldTotalAmount:
			values[i] = new(sql.NullFloat64)
		case invoice.FieldID:
			values[i] = new(sql.NullInt64)
		case invoice.FieldReferenceNumber, invoice.FieldStatus, invoice.FieldCurrency, invoice.FieldShareToken:
			values[i] = new(sql.NullString)
		case invoice.FieldIssueDate, invoice.FieldDueDate, invoice.FieldCreatedAt, invoice.FieldShareExpiry:
			values[i] = new(sql.NullTime)
		case invoice.ForeignKeys[0]: // invoice_customer
			values[i] = new(sql.NullInt64)
		case invoice.ForeignKeys[1]: // user_invoices
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Invoice fields.
func (i *Invoice) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for j := range columns {
		switch columns[j] {
		case invoice.FieldID:
			value, ok := values[j].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			i.ID = int(value.Int64)
		case invoice.FieldReferenceNumber:
			if value, ok := values[j].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field reference_number", values[j])
			} else if value.Valid {
				i.ReferenceNumber = value.String
			}
		case invoice.FieldTotalAmount:
			if value, ok := values[j].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field total_amount", values[j])
			} else if value.Valid {
				i.TotalAmount = value.Float64
			}
		case invoice.FieldStatus:
			if value, ok := values[j].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[j])
			} else if value.Valid {
				i.Status = value.String
			}
		case invoice.FieldIssueDate:
			if value, ok := values[j].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field issue_date", values[j])
			} else if value.Valid {
				i.IssueDate = value.Time
			}
		case invoice.FieldDueDate:
			if value, ok := values[j].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field due_date", values[j])
			} else if value.Valid {
				i.DueDate = value.Time
			}
		case invoice.FieldCurrency:
			if value, ok := values[j].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field currency", values[j])
			} else if value.Valid {
				i.Currency = value.String
			}
		case invoice.FieldCreatedAt:
			if value, ok := values[j].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[j])
			} else if value.Valid {
				i.CreatedAt = value.Time
			}
		case invoice.FieldShareToken:
			if value, ok := values[j].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field share_token", values[j])
			} else if value.Valid {
				i.ShareToken = value.String
			}
		case invoice.FieldShareExpiry:
			if value, ok := values[j].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field share_expiry", values[j])
			} else if value.Valid {
				i.ShareExpiry = value.Time
			}
		case invoice.ForeignKeys[0]:
			if value, ok := values[j].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field invoice_customer", value)
			} else if value.Valid {
				i.invoice_customer = new(int)
				*i.invoice_customer = int(value.Int64)
			}
		case invoice.ForeignKeys[1]:
			if value, ok := values[j].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field user_invoices", value)
			} else if value.Valid {
				i.user_invoices = new(int)
				*i.user_invoices = int(value.Int64)
			}
		default:
			i.selectValues.Set(columns[j], values[j])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Invoice.
// This includes values selected through modifiers, order, etc.
func (i *Invoice) Value(name string) (ent.Value, error) {
	return i.selectValues.Get(name)
}

// QueryCreator queries the "creator" edge of the Invoice entity.
func (i *Invoice) QueryCreator() *UserQuery {
	return NewInvoiceClient(i.config).QueryCreator(i)
}

// QueryItems queries the "items" edge of the Invoice entity.
func (i *Invoice) QueryItems() *InvoiceItemQuery {
	return NewInvoiceClient(i.config).QueryItems(i)
}

// QueryPayments queries the "payments" edge of the Invoice entity.
func (i *Invoice) QueryPayments() *PaymentQuery {
	return NewInvoiceClient(i.config).QueryPayments(i)
}

// QueryCustomer queries the "customer" edge of the Invoice entity.
func (i *Invoice) QueryCustomer() *CustomerQuery {
	return NewInvoiceClient(i.config).QueryCustomer(i)
}

// Update returns a builder for updating this Invoice.
// Note that you need to call Invoice.Unwrap() before calling this method if this Invoice
// was returned from a transaction, and the transaction was committed or rolled back.
func (i *Invoice) Update() *InvoiceUpdateOne {
	return NewInvoiceClient(i.config).UpdateOne(i)
}

// Unwrap unwraps the Invoice entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (i *Invoice) Unwrap() *Invoice {
	_tx, ok := i.config.driver.(*txDriver)
	if !ok {
		panic("ent: Invoice is not a transactional entity")
	}
	i.config.driver = _tx.drv
	return i
}

// String implements the fmt.Stringer.
func (i *Invoice) String() string {
	var builder strings.Builder
	builder.WriteString("Invoice(")
	builder.WriteString(fmt.Sprintf("id=%v, ", i.ID))
	builder.WriteString("reference_number=")
	builder.WriteString(i.ReferenceNumber)
	builder.WriteString(", ")
	builder.WriteString("total_amount=")
	builder.WriteString(fmt.Sprintf("%v", i.TotalAmount))
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(i.Status)
	builder.WriteString(", ")
	builder.WriteString("issue_date=")
	builder.WriteString(i.IssueDate.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("due_date=")
	builder.WriteString(i.DueDate.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("currency=")
	builder.WriteString(i.Currency)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(i.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("share_token=")
	builder.WriteString(i.ShareToken)
	builder.WriteString(", ")
	builder.WriteString("share_expiry=")
	builder.WriteString(i.ShareExpiry.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Invoices is a parsable slice of Invoice.
type Invoices []*Invoice
