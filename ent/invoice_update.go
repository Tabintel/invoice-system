// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/Tabintel/invoice-system/ent/customer"
	"github.com/Tabintel/invoice-system/ent/invoice"
	"github.com/Tabintel/invoice-system/ent/invoiceitem"
	"github.com/Tabintel/invoice-system/ent/payment"
	"github.com/Tabintel/invoice-system/ent/predicate"
	"github.com/Tabintel/invoice-system/ent/user"
)

// InvoiceUpdate is the builder for updating Invoice entities.
type InvoiceUpdate struct {
	config
	hooks    []Hook
	mutation *InvoiceMutation
}

// Where appends a list predicates to the InvoiceUpdate builder.
func (iu *InvoiceUpdate) Where(ps ...predicate.Invoice) *InvoiceUpdate {
	iu.mutation.Where(ps...)
	return iu
}

// SetReferenceNumber sets the "reference_number" field.
func (iu *InvoiceUpdate) SetReferenceNumber(s string) *InvoiceUpdate {
	iu.mutation.SetReferenceNumber(s)
	return iu
}

// SetNillableReferenceNumber sets the "reference_number" field if the given value is not nil.
func (iu *InvoiceUpdate) SetNillableReferenceNumber(s *string) *InvoiceUpdate {
	if s != nil {
		iu.SetReferenceNumber(*s)
	}
	return iu
}

// SetTotalAmount sets the "total_amount" field.
func (iu *InvoiceUpdate) SetTotalAmount(f float64) *InvoiceUpdate {
	iu.mutation.ResetTotalAmount()
	iu.mutation.SetTotalAmount(f)
	return iu
}

// SetNillableTotalAmount sets the "total_amount" field if the given value is not nil.
func (iu *InvoiceUpdate) SetNillableTotalAmount(f *float64) *InvoiceUpdate {
	if f != nil {
		iu.SetTotalAmount(*f)
	}
	return iu
}

// AddTotalAmount adds f to the "total_amount" field.
func (iu *InvoiceUpdate) AddTotalAmount(f float64) *InvoiceUpdate {
	iu.mutation.AddTotalAmount(f)
	return iu
}

// SetStatus sets the "status" field.
func (iu *InvoiceUpdate) SetStatus(s string) *InvoiceUpdate {
	iu.mutation.SetStatus(s)
	return iu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (iu *InvoiceUpdate) SetNillableStatus(s *string) *InvoiceUpdate {
	if s != nil {
		iu.SetStatus(*s)
	}
	return iu
}

// SetIssueDate sets the "issue_date" field.
func (iu *InvoiceUpdate) SetIssueDate(t time.Time) *InvoiceUpdate {
	iu.mutation.SetIssueDate(t)
	return iu
}

// SetNillableIssueDate sets the "issue_date" field if the given value is not nil.
func (iu *InvoiceUpdate) SetNillableIssueDate(t *time.Time) *InvoiceUpdate {
	if t != nil {
		iu.SetIssueDate(*t)
	}
	return iu
}

// SetDueDate sets the "due_date" field.
func (iu *InvoiceUpdate) SetDueDate(t time.Time) *InvoiceUpdate {
	iu.mutation.SetDueDate(t)
	return iu
}

// SetNillableDueDate sets the "due_date" field if the given value is not nil.
func (iu *InvoiceUpdate) SetNillableDueDate(t *time.Time) *InvoiceUpdate {
	if t != nil {
		iu.SetDueDate(*t)
	}
	return iu
}

// SetCurrency sets the "currency" field.
func (iu *InvoiceUpdate) SetCurrency(s string) *InvoiceUpdate {
	iu.mutation.SetCurrency(s)
	return iu
}

// SetNillableCurrency sets the "currency" field if the given value is not nil.
func (iu *InvoiceUpdate) SetNillableCurrency(s *string) *InvoiceUpdate {
	if s != nil {
		iu.SetCurrency(*s)
	}
	return iu
}

// SetCreatedAt sets the "created_at" field.
func (iu *InvoiceUpdate) SetCreatedAt(t time.Time) *InvoiceUpdate {
	iu.mutation.SetCreatedAt(t)
	return iu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (iu *InvoiceUpdate) SetNillableCreatedAt(t *time.Time) *InvoiceUpdate {
	if t != nil {
		iu.SetCreatedAt(*t)
	}
	return iu
}

// SetCreatorID sets the "creator" edge to the User entity by ID.
func (iu *InvoiceUpdate) SetCreatorID(id int) *InvoiceUpdate {
	iu.mutation.SetCreatorID(id)
	return iu
}

// SetNillableCreatorID sets the "creator" edge to the User entity by ID if the given value is not nil.
func (iu *InvoiceUpdate) SetNillableCreatorID(id *int) *InvoiceUpdate {
	if id != nil {
		iu = iu.SetCreatorID(*id)
	}
	return iu
}

// SetCreator sets the "creator" edge to the User entity.
func (iu *InvoiceUpdate) SetCreator(u *User) *InvoiceUpdate {
	return iu.SetCreatorID(u.ID)
}

// AddItemIDs adds the "items" edge to the InvoiceItem entity by IDs.
func (iu *InvoiceUpdate) AddItemIDs(ids ...int) *InvoiceUpdate {
	iu.mutation.AddItemIDs(ids...)
	return iu
}

// AddItems adds the "items" edges to the InvoiceItem entity.
func (iu *InvoiceUpdate) AddItems(i ...*InvoiceItem) *InvoiceUpdate {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return iu.AddItemIDs(ids...)
}

// AddPaymentIDs adds the "payments" edge to the Payment entity by IDs.
func (iu *InvoiceUpdate) AddPaymentIDs(ids ...int) *InvoiceUpdate {
	iu.mutation.AddPaymentIDs(ids...)
	return iu
}

// AddPayments adds the "payments" edges to the Payment entity.
func (iu *InvoiceUpdate) AddPayments(p ...*Payment) *InvoiceUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return iu.AddPaymentIDs(ids...)
}

// SetCustomerID sets the "customer" edge to the Customer entity by ID.
func (iu *InvoiceUpdate) SetCustomerID(id int) *InvoiceUpdate {
	iu.mutation.SetCustomerID(id)
	return iu
}

// SetNillableCustomerID sets the "customer" edge to the Customer entity by ID if the given value is not nil.
func (iu *InvoiceUpdate) SetNillableCustomerID(id *int) *InvoiceUpdate {
	if id != nil {
		iu = iu.SetCustomerID(*id)
	}
	return iu
}

// SetCustomer sets the "customer" edge to the Customer entity.
func (iu *InvoiceUpdate) SetCustomer(c *Customer) *InvoiceUpdate {
	return iu.SetCustomerID(c.ID)
}

// Mutation returns the InvoiceMutation object of the builder.
func (iu *InvoiceUpdate) Mutation() *InvoiceMutation {
	return iu.mutation
}

// ClearCreator clears the "creator" edge to the User entity.
func (iu *InvoiceUpdate) ClearCreator() *InvoiceUpdate {
	iu.mutation.ClearCreator()
	return iu
}

// ClearItems clears all "items" edges to the InvoiceItem entity.
func (iu *InvoiceUpdate) ClearItems() *InvoiceUpdate {
	iu.mutation.ClearItems()
	return iu
}

// RemoveItemIDs removes the "items" edge to InvoiceItem entities by IDs.
func (iu *InvoiceUpdate) RemoveItemIDs(ids ...int) *InvoiceUpdate {
	iu.mutation.RemoveItemIDs(ids...)
	return iu
}

// RemoveItems removes "items" edges to InvoiceItem entities.
func (iu *InvoiceUpdate) RemoveItems(i ...*InvoiceItem) *InvoiceUpdate {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return iu.RemoveItemIDs(ids...)
}

// ClearPayments clears all "payments" edges to the Payment entity.
func (iu *InvoiceUpdate) ClearPayments() *InvoiceUpdate {
	iu.mutation.ClearPayments()
	return iu
}

// RemovePaymentIDs removes the "payments" edge to Payment entities by IDs.
func (iu *InvoiceUpdate) RemovePaymentIDs(ids ...int) *InvoiceUpdate {
	iu.mutation.RemovePaymentIDs(ids...)
	return iu
}

// RemovePayments removes "payments" edges to Payment entities.
func (iu *InvoiceUpdate) RemovePayments(p ...*Payment) *InvoiceUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return iu.RemovePaymentIDs(ids...)
}

// ClearCustomer clears the "customer" edge to the Customer entity.
func (iu *InvoiceUpdate) ClearCustomer() *InvoiceUpdate {
	iu.mutation.ClearCustomer()
	return iu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (iu *InvoiceUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, iu.sqlSave, iu.mutation, iu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (iu *InvoiceUpdate) SaveX(ctx context.Context) int {
	affected, err := iu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (iu *InvoiceUpdate) Exec(ctx context.Context) error {
	_, err := iu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (iu *InvoiceUpdate) ExecX(ctx context.Context) {
	if err := iu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (iu *InvoiceUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(invoice.Table, invoice.Columns, sqlgraph.NewFieldSpec(invoice.FieldID, field.TypeInt))
	if ps := iu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := iu.mutation.ReferenceNumber(); ok {
		_spec.SetField(invoice.FieldReferenceNumber, field.TypeString, value)
	}
	if value, ok := iu.mutation.TotalAmount(); ok {
		_spec.SetField(invoice.FieldTotalAmount, field.TypeFloat64, value)
	}
	if value, ok := iu.mutation.AddedTotalAmount(); ok {
		_spec.AddField(invoice.FieldTotalAmount, field.TypeFloat64, value)
	}
	if value, ok := iu.mutation.Status(); ok {
		_spec.SetField(invoice.FieldStatus, field.TypeString, value)
	}
	if value, ok := iu.mutation.IssueDate(); ok {
		_spec.SetField(invoice.FieldIssueDate, field.TypeTime, value)
	}
	if value, ok := iu.mutation.DueDate(); ok {
		_spec.SetField(invoice.FieldDueDate, field.TypeTime, value)
	}
	if value, ok := iu.mutation.Currency(); ok {
		_spec.SetField(invoice.FieldCurrency, field.TypeString, value)
	}
	if value, ok := iu.mutation.CreatedAt(); ok {
		_spec.SetField(invoice.FieldCreatedAt, field.TypeTime, value)
	}
	if iu.mutation.CreatorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   invoice.CreatorTable,
			Columns: []string{invoice.CreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iu.mutation.CreatorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   invoice.CreatorTable,
			Columns: []string{invoice.CreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if iu.mutation.ItemsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   invoice.ItemsTable,
			Columns: []string{invoice.ItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(invoiceitem.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iu.mutation.RemovedItemsIDs(); len(nodes) > 0 && !iu.mutation.ItemsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   invoice.ItemsTable,
			Columns: []string{invoice.ItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(invoiceitem.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iu.mutation.ItemsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   invoice.ItemsTable,
			Columns: []string{invoice.ItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(invoiceitem.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if iu.mutation.PaymentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   invoice.PaymentsTable,
			Columns: []string{invoice.PaymentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(payment.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iu.mutation.RemovedPaymentsIDs(); len(nodes) > 0 && !iu.mutation.PaymentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   invoice.PaymentsTable,
			Columns: []string{invoice.PaymentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(payment.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iu.mutation.PaymentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   invoice.PaymentsTable,
			Columns: []string{invoice.PaymentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(payment.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if iu.mutation.CustomerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   invoice.CustomerTable,
			Columns: []string{invoice.CustomerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customer.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iu.mutation.CustomerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   invoice.CustomerTable,
			Columns: []string{invoice.CustomerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customer.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, iu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{invoice.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	iu.mutation.done = true
	return n, nil
}

// InvoiceUpdateOne is the builder for updating a single Invoice entity.
type InvoiceUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *InvoiceMutation
}

// SetReferenceNumber sets the "reference_number" field.
func (iuo *InvoiceUpdateOne) SetReferenceNumber(s string) *InvoiceUpdateOne {
	iuo.mutation.SetReferenceNumber(s)
	return iuo
}

// SetNillableReferenceNumber sets the "reference_number" field if the given value is not nil.
func (iuo *InvoiceUpdateOne) SetNillableReferenceNumber(s *string) *InvoiceUpdateOne {
	if s != nil {
		iuo.SetReferenceNumber(*s)
	}
	return iuo
}

// SetTotalAmount sets the "total_amount" field.
func (iuo *InvoiceUpdateOne) SetTotalAmount(f float64) *InvoiceUpdateOne {
	iuo.mutation.ResetTotalAmount()
	iuo.mutation.SetTotalAmount(f)
	return iuo
}

// SetNillableTotalAmount sets the "total_amount" field if the given value is not nil.
func (iuo *InvoiceUpdateOne) SetNillableTotalAmount(f *float64) *InvoiceUpdateOne {
	if f != nil {
		iuo.SetTotalAmount(*f)
	}
	return iuo
}

// AddTotalAmount adds f to the "total_amount" field.
func (iuo *InvoiceUpdateOne) AddTotalAmount(f float64) *InvoiceUpdateOne {
	iuo.mutation.AddTotalAmount(f)
	return iuo
}

// SetStatus sets the "status" field.
func (iuo *InvoiceUpdateOne) SetStatus(s string) *InvoiceUpdateOne {
	iuo.mutation.SetStatus(s)
	return iuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (iuo *InvoiceUpdateOne) SetNillableStatus(s *string) *InvoiceUpdateOne {
	if s != nil {
		iuo.SetStatus(*s)
	}
	return iuo
}

// SetIssueDate sets the "issue_date" field.
func (iuo *InvoiceUpdateOne) SetIssueDate(t time.Time) *InvoiceUpdateOne {
	iuo.mutation.SetIssueDate(t)
	return iuo
}

// SetNillableIssueDate sets the "issue_date" field if the given value is not nil.
func (iuo *InvoiceUpdateOne) SetNillableIssueDate(t *time.Time) *InvoiceUpdateOne {
	if t != nil {
		iuo.SetIssueDate(*t)
	}
	return iuo
}

// SetDueDate sets the "due_date" field.
func (iuo *InvoiceUpdateOne) SetDueDate(t time.Time) *InvoiceUpdateOne {
	iuo.mutation.SetDueDate(t)
	return iuo
}

// SetNillableDueDate sets the "due_date" field if the given value is not nil.
func (iuo *InvoiceUpdateOne) SetNillableDueDate(t *time.Time) *InvoiceUpdateOne {
	if t != nil {
		iuo.SetDueDate(*t)
	}
	return iuo
}

// SetCurrency sets the "currency" field.
func (iuo *InvoiceUpdateOne) SetCurrency(s string) *InvoiceUpdateOne {
	iuo.mutation.SetCurrency(s)
	return iuo
}

// SetNillableCurrency sets the "currency" field if the given value is not nil.
func (iuo *InvoiceUpdateOne) SetNillableCurrency(s *string) *InvoiceUpdateOne {
	if s != nil {
		iuo.SetCurrency(*s)
	}
	return iuo
}

// SetCreatedAt sets the "created_at" field.
func (iuo *InvoiceUpdateOne) SetCreatedAt(t time.Time) *InvoiceUpdateOne {
	iuo.mutation.SetCreatedAt(t)
	return iuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (iuo *InvoiceUpdateOne) SetNillableCreatedAt(t *time.Time) *InvoiceUpdateOne {
	if t != nil {
		iuo.SetCreatedAt(*t)
	}
	return iuo
}

// SetCreatorID sets the "creator" edge to the User entity by ID.
func (iuo *InvoiceUpdateOne) SetCreatorID(id int) *InvoiceUpdateOne {
	iuo.mutation.SetCreatorID(id)
	return iuo
}

// SetNillableCreatorID sets the "creator" edge to the User entity by ID if the given value is not nil.
func (iuo *InvoiceUpdateOne) SetNillableCreatorID(id *int) *InvoiceUpdateOne {
	if id != nil {
		iuo = iuo.SetCreatorID(*id)
	}
	return iuo
}

// SetCreator sets the "creator" edge to the User entity.
func (iuo *InvoiceUpdateOne) SetCreator(u *User) *InvoiceUpdateOne {
	return iuo.SetCreatorID(u.ID)
}

// AddItemIDs adds the "items" edge to the InvoiceItem entity by IDs.
func (iuo *InvoiceUpdateOne) AddItemIDs(ids ...int) *InvoiceUpdateOne {
	iuo.mutation.AddItemIDs(ids...)
	return iuo
}

// AddItems adds the "items" edges to the InvoiceItem entity.
func (iuo *InvoiceUpdateOne) AddItems(i ...*InvoiceItem) *InvoiceUpdateOne {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return iuo.AddItemIDs(ids...)
}

// AddPaymentIDs adds the "payments" edge to the Payment entity by IDs.
func (iuo *InvoiceUpdateOne) AddPaymentIDs(ids ...int) *InvoiceUpdateOne {
	iuo.mutation.AddPaymentIDs(ids...)
	return iuo
}

// AddPayments adds the "payments" edges to the Payment entity.
func (iuo *InvoiceUpdateOne) AddPayments(p ...*Payment) *InvoiceUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return iuo.AddPaymentIDs(ids...)
}

// SetCustomerID sets the "customer" edge to the Customer entity by ID.
func (iuo *InvoiceUpdateOne) SetCustomerID(id int) *InvoiceUpdateOne {
	iuo.mutation.SetCustomerID(id)
	return iuo
}

// SetNillableCustomerID sets the "customer" edge to the Customer entity by ID if the given value is not nil.
func (iuo *InvoiceUpdateOne) SetNillableCustomerID(id *int) *InvoiceUpdateOne {
	if id != nil {
		iuo = iuo.SetCustomerID(*id)
	}
	return iuo
}

// SetCustomer sets the "customer" edge to the Customer entity.
func (iuo *InvoiceUpdateOne) SetCustomer(c *Customer) *InvoiceUpdateOne {
	return iuo.SetCustomerID(c.ID)
}

// Mutation returns the InvoiceMutation object of the builder.
func (iuo *InvoiceUpdateOne) Mutation() *InvoiceMutation {
	return iuo.mutation
}

// ClearCreator clears the "creator" edge to the User entity.
func (iuo *InvoiceUpdateOne) ClearCreator() *InvoiceUpdateOne {
	iuo.mutation.ClearCreator()
	return iuo
}

// ClearItems clears all "items" edges to the InvoiceItem entity.
func (iuo *InvoiceUpdateOne) ClearItems() *InvoiceUpdateOne {
	iuo.mutation.ClearItems()
	return iuo
}

// RemoveItemIDs removes the "items" edge to InvoiceItem entities by IDs.
func (iuo *InvoiceUpdateOne) RemoveItemIDs(ids ...int) *InvoiceUpdateOne {
	iuo.mutation.RemoveItemIDs(ids...)
	return iuo
}

// RemoveItems removes "items" edges to InvoiceItem entities.
func (iuo *InvoiceUpdateOne) RemoveItems(i ...*InvoiceItem) *InvoiceUpdateOne {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return iuo.RemoveItemIDs(ids...)
}

// ClearPayments clears all "payments" edges to the Payment entity.
func (iuo *InvoiceUpdateOne) ClearPayments() *InvoiceUpdateOne {
	iuo.mutation.ClearPayments()
	return iuo
}

// RemovePaymentIDs removes the "payments" edge to Payment entities by IDs.
func (iuo *InvoiceUpdateOne) RemovePaymentIDs(ids ...int) *InvoiceUpdateOne {
	iuo.mutation.RemovePaymentIDs(ids...)
	return iuo
}

// RemovePayments removes "payments" edges to Payment entities.
func (iuo *InvoiceUpdateOne) RemovePayments(p ...*Payment) *InvoiceUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return iuo.RemovePaymentIDs(ids...)
}

// ClearCustomer clears the "customer" edge to the Customer entity.
func (iuo *InvoiceUpdateOne) ClearCustomer() *InvoiceUpdateOne {
	iuo.mutation.ClearCustomer()
	return iuo
}

// Where appends a list predicates to the InvoiceUpdate builder.
func (iuo *InvoiceUpdateOne) Where(ps ...predicate.Invoice) *InvoiceUpdateOne {
	iuo.mutation.Where(ps...)
	return iuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (iuo *InvoiceUpdateOne) Select(field string, fields ...string) *InvoiceUpdateOne {
	iuo.fields = append([]string{field}, fields...)
	return iuo
}

// Save executes the query and returns the updated Invoice entity.
func (iuo *InvoiceUpdateOne) Save(ctx context.Context) (*Invoice, error) {
	return withHooks(ctx, iuo.sqlSave, iuo.mutation, iuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (iuo *InvoiceUpdateOne) SaveX(ctx context.Context) *Invoice {
	node, err := iuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (iuo *InvoiceUpdateOne) Exec(ctx context.Context) error {
	_, err := iuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (iuo *InvoiceUpdateOne) ExecX(ctx context.Context) {
	if err := iuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (iuo *InvoiceUpdateOne) sqlSave(ctx context.Context) (_node *Invoice, err error) {
	_spec := sqlgraph.NewUpdateSpec(invoice.Table, invoice.Columns, sqlgraph.NewFieldSpec(invoice.FieldID, field.TypeInt))
	id, ok := iuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Invoice.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := iuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, invoice.FieldID)
		for _, f := range fields {
			if !invoice.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != invoice.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := iuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := iuo.mutation.ReferenceNumber(); ok {
		_spec.SetField(invoice.FieldReferenceNumber, field.TypeString, value)
	}
	if value, ok := iuo.mutation.TotalAmount(); ok {
		_spec.SetField(invoice.FieldTotalAmount, field.TypeFloat64, value)
	}
	if value, ok := iuo.mutation.AddedTotalAmount(); ok {
		_spec.AddField(invoice.FieldTotalAmount, field.TypeFloat64, value)
	}
	if value, ok := iuo.mutation.Status(); ok {
		_spec.SetField(invoice.FieldStatus, field.TypeString, value)
	}
	if value, ok := iuo.mutation.IssueDate(); ok {
		_spec.SetField(invoice.FieldIssueDate, field.TypeTime, value)
	}
	if value, ok := iuo.mutation.DueDate(); ok {
		_spec.SetField(invoice.FieldDueDate, field.TypeTime, value)
	}
	if value, ok := iuo.mutation.Currency(); ok {
		_spec.SetField(invoice.FieldCurrency, field.TypeString, value)
	}
	if value, ok := iuo.mutation.CreatedAt(); ok {
		_spec.SetField(invoice.FieldCreatedAt, field.TypeTime, value)
	}
	if iuo.mutation.CreatorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   invoice.CreatorTable,
			Columns: []string{invoice.CreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iuo.mutation.CreatorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   invoice.CreatorTable,
			Columns: []string{invoice.CreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if iuo.mutation.ItemsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   invoice.ItemsTable,
			Columns: []string{invoice.ItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(invoiceitem.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iuo.mutation.RemovedItemsIDs(); len(nodes) > 0 && !iuo.mutation.ItemsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   invoice.ItemsTable,
			Columns: []string{invoice.ItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(invoiceitem.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iuo.mutation.ItemsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   invoice.ItemsTable,
			Columns: []string{invoice.ItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(invoiceitem.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if iuo.mutation.PaymentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   invoice.PaymentsTable,
			Columns: []string{invoice.PaymentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(payment.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iuo.mutation.RemovedPaymentsIDs(); len(nodes) > 0 && !iuo.mutation.PaymentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   invoice.PaymentsTable,
			Columns: []string{invoice.PaymentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(payment.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iuo.mutation.PaymentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   invoice.PaymentsTable,
			Columns: []string{invoice.PaymentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(payment.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if iuo.mutation.CustomerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   invoice.CustomerTable,
			Columns: []string{invoice.CustomerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customer.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iuo.mutation.CustomerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   invoice.CustomerTable,
			Columns: []string{invoice.CustomerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customer.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Invoice{config: iuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, iuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{invoice.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	iuo.mutation.done = true
	return _node, nil
}
