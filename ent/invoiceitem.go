// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/Tabintel/invoice-system/ent/invoiceitem"
)

// InvoiceItem is the model entity for the InvoiceItem schema.
type InvoiceItem struct {
	config
	// ID of the ent.
	ID            int `json:"id,omitempty"`
	invoice_items *int
	selectValues  sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*InvoiceItem) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case invoiceitem.FieldID:
			values[i] = new(sql.NullInt64)
		case invoiceitem.ForeignKeys[0]: // invoice_items
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the InvoiceItem fields.
func (ii *InvoiceItem) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case invoiceitem.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ii.ID = int(value.Int64)
		case invoiceitem.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field invoice_items", value)
			} else if value.Valid {
				ii.invoice_items = new(int)
				*ii.invoice_items = int(value.Int64)
			}
		default:
			ii.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the InvoiceItem.
// This includes values selected through modifiers, order, etc.
func (ii *InvoiceItem) Value(name string) (ent.Value, error) {
	return ii.selectValues.Get(name)
}

// Update returns a builder for updating this InvoiceItem.
// Note that you need to call InvoiceItem.Unwrap() before calling this method if this InvoiceItem
// was returned from a transaction, and the transaction was committed or rolled back.
func (ii *InvoiceItem) Update() *InvoiceItemUpdateOne {
	return NewInvoiceItemClient(ii.config).UpdateOne(ii)
}

// Unwrap unwraps the InvoiceItem entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ii *InvoiceItem) Unwrap() *InvoiceItem {
	_tx, ok := ii.config.driver.(*txDriver)
	if !ok {
		panic("ent: InvoiceItem is not a transactional entity")
	}
	ii.config.driver = _tx.drv
	return ii
}

// String implements the fmt.Stringer.
func (ii *InvoiceItem) String() string {
	var builder strings.Builder
	builder.WriteString("InvoiceItem(")
	builder.WriteString(fmt.Sprintf("id=%v", ii.ID))
	builder.WriteByte(')')
	return builder.String()
}

// InvoiceItems is a parsable slice of InvoiceItem.
type InvoiceItems []*InvoiceItem
